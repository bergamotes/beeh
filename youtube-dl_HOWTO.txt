% youtube-dl is a command-line utility written in python to download video content from YouTube and other web platforms.
% Download utility: pip install --upgrade youtube-dl
% Update utility: pip install -U youtube-dl

% Documentation:
% https://github.com/rg3/youtube-dl/blob/master/README.md

% Have youtube-dl.exe installed in PATH or in python scripts folder.
% Have ffmpeg installed in PATH or in python scripts folder.
% https://ffmpeg.zeranoe.com/builds/

% Use in terminal
% Good habit to upgrade first to keep up to date with YouTube's evolving codebase.

% ignore errors(video not available in playlist) with -i
% resume if halted, ignore errors, don't overwrite: -ciw

% Upgrade
-----------
pip install -U youtube-dl

% For video
-----------
youtube-dl -o "%(title)s.%(ext)s" https://www.youtube.com/watch?v=videoID

% For playlist (creates a directory within working directory named %(playlist))
------------------------------------------------------------------------------
youtube-dl -o "%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s" https://www.youtube.com/playlist?list=playlistID

% For audio only
----------------
youtube-dl -x --audio-format "mp3" -o "%(title)s.%(ext)s" https://www.youtube.com/watch?v=videoID

youtube-dl -xciw -o "%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s" https://www.youtube.com/playlist?list=playlistID

% Playlist Range
----------------
"--playlist-items 1-3,7,10-13"

% Multiple Files in parallel
----------------------------
# Put all url in file (like sources.csv)
# Use xargs with -n option to divide requests feeds and spawn multiple youtube-dl with -P option (multiprocessing)
cut -d, -f3 sources.csv | xargs -n 1 -P 4 youtube-dl -xciw --audio-format "mp3" -o "%(playlist)s/%(playlist_index)s - %(title)s.%(ext).s"


% Batch convert with ffmpeg
---------------------------

find . -type f -name '*.opus' -print0 |
while IFS= read -r -d '' file; do
    printf '>>> %s\n' "${file}";
    # output to /dev/null to avoid having ffmpeg read its own output
    # and trigger weird behavior
    < /dev/null ffmpeg -y -i "${file}" -f mp3 "${file%.*}.mp3";
    rm "${file}"
done

for f in *.opus; do ffmpeg -i "$f" -f mp3 "${f%.*}.mp3"; done
for f in *.opus; do ffmpeg -i "$f" -acodec libmp3lame "${f%.*}.mp3"; done


% PRINT ALL EXTENSIONS IN DIR TREE
----------------------------------

find . -type f | awk -F. '!arr[$NF]++ {print $NF}'
# $NF matches last record.
# Awk checks if associative array (arr) has matching entry and increments if true

# Count and sort:
find . -type f | awk -F. '!arr[$NF]++ {next} END{for (ext in arr) printf("%3s %s\n", arr[ext], ext)}' | sort -nr


% DELETE MATCHING FILES
-----------------------

find . -type f -name "*.ini" -delete


% COUNT NUMBER OF FILES IN EACH DIR
-----------------------------------

find . -type f -not -name '*.jpg' | cut -d/ -f2 | sort | uniq -c

# Number of mp3 files in each subdir + cumulative sum of all files
i=1
na='./NA'
format="%3d\t%5s\t%s\n"
find . -type d -print0 | while read -d '' -r dir; do
    echo "${dir}"
    echo "new:"
    read -p -r new
    echo ${new}
    mp3s=$(find "${dir}" -maxdepth 1 -type f -name '*.mp3' | wc -l)
    [ "$mp3s" == '0' ] && continue
    if [ "$dir" == "$na" ] || [ "$dir" == '.' ]
    #if [[ "$dir" =~ \.\/NA|\. ]]
    then
        IFS=$'\n'
        for album in $(find "${dir}" -maxdepth 1 -type f -name '*.mp3'); do
            album=${album/'NA - '/}
            if [ "$dir" == '.' ]
            then
              album=${album/'./'/}
            fi
            printf "${format}" $i "(1*)" "$album"
            i=$((i+1))
        done
        IFS=' '
    else
        printf "${format}" $i "(${mp3s})" "$dir"
        i=$((i+mp3s))
    fi
done > playlist.tsv


% SONG'S LENGTH
---------------

ffprobe -v quiet -print_format compact=print_section=0:nokey=1:escape=csv -show_entries format=duration -sexagesimal "path_to_song.mp3"


% CHANGE SONG NAME IF LONGER THAN 60 CHAR
-----------------------------------------

IFS=$'\n'
for album in $(find . -maxdepth 1 -type f -name '*.mp3');
do
    echo "${album}";
    [[ ${#album} -lt 60 ]] && continue
    echo "> ${#album} characters >> replace below: "
    read -p '' -r new;
    if [[ ${#new} -gt 60 ]]
    then
    echo "> ${#new} characters!!! >> try again below: "
    read -p '' -r new;
    fi
    #[[ ! -z ${new} ]] && mv -v "${album}" "${new}";
done
